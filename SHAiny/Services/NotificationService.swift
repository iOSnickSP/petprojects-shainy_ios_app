//
//  NotificationService.swift
//  SHAiny
//
//  Created by AI Assistant on 26.10.2025.
//

import Foundation
import UserNotifications
import Combine
import UIKit

class NotificationService: NSObject, ObservableObject {
    static let shared = NotificationService()
    
    @Published var currentOpenChatId: String? = nil
    @Published var deviceToken: String? = nil
    private let center = UNUserNotificationCenter.current()
    
    private var baseURL: String {
        return SettingsService.shared.serverURL
    }
    
    private override init() {
        super.init()
        center.delegate = self
    }
    
    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è + —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è remote notifications
    func requestAuthorization() {
        center.requestAuthorization(options: [.alert, .sound, .badge]) { [weak self] granted, error in
            if granted {
                print("‚úÖ Notification permission granted")
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è remote notifications
                DispatchQueue.main.async {
                    UIApplication.shared.registerForRemoteNotifications()
                }
            } else if let error = error {
                print("‚ùå Notification permission error: \(error.localizedDescription)")
            } else {
                print("‚ö†Ô∏è Notification permission denied")
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ device token
    func didRegisterForRemoteNotifications(with deviceToken: Data) {
        let tokenString = deviceToken.map { String(format: "%02.2hhx", $0) }.joined()
        self.deviceToken = tokenString
        print("üì± Device token: \(tokenString)")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        Task {
            await sendDeviceTokenToServer(tokenString)
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    func didFailToRegisterForRemoteNotifications(with error: Error) {
        print("‚ùå Failed to register for remote notifications: \(error.localizedDescription)")
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ device token –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    private func sendDeviceTokenToServer(_ token: String) async {
        guard let authToken = KeychainService.shared.getAccessToken(),
              let url = URL(string: "\(baseURL)/notifications/register") else {
            print("‚ùå Cannot send device token - missing auth token or server URL")
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(authToken)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        let body: [String: String] = ["deviceToken": self.deviceToken ?? ""]
        request.httpBody = try? JSONEncoder().encode(body)
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            if let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 {
                print("‚úÖ Device token registered on server")
            } else {
                print("‚ö†Ô∏è Failed to register device token: \(String(data: data, encoding: .utf8) ?? "unknown")")
            }
        } catch {
            print("‚ùå Error sending device token: \(error.localizedDescription)")
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    func checkAuthorizationStatus(completion: @escaping (Bool) -> Void) {
        center.getNotificationSettings { settings in
            completion(settings.authorizationStatus == .authorized)
        }
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    func showNewMessageNotification(chatName: String, messageText: String, chatId: String, senderName: String?) {
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        if currentOpenChatId == chatId {
            print("üîï Skipping notification - user is in the chat")
            return
        }
        
        checkAuthorizationStatus { [weak self] authorized in
            guard authorized else {
                print("‚ö†Ô∏è Notifications not authorized")
                return
            }
            
            let content = UNMutableNotificationContent()
            content.title = chatName
            
            if let sender = senderName {
                content.subtitle = "\(sender) left a message"
            }
            
            content.body = messageText
            content.sound = .default
            // Badge –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ updateBadgeCount
            
            // –î–æ–±–∞–≤–ª—è–µ–º chatId –≤ userInfo –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            content.userInfo = ["chatId": chatId]
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)
            let request = UNNotificationRequest(
                identifier: UUID().uuidString,
                content: content,
                trigger: nil // nil = –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            )
            
            self?.center.add(request) { error in
                if let error = error {
                    print("‚ùå Failed to show notification: \(error.localizedDescription)")
                } else {
                    print("‚úÖ Notification shown for chat: \(chatName)")
                }
            }
        }
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    func clearAllNotifications() {
        center.removeAllDeliveredNotifications()
        UIApplication.shared.applicationIconBadgeNumber = 0
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    func clearNotifications(for chatId: String) {
        center.getDeliveredNotifications { notifications in
            let identifiersToRemove = notifications
                .filter { notification in
                    if let notificationChatId = notification.request.content.userInfo["chatId"] as? String {
                        return notificationChatId == chatId
                    }
                    return false
                }
                .map { $0.request.identifier }
            
            self.center.removeDeliveredNotifications(withIdentifiers: identifiersToRemove)
            print("üßπ Cleared \(identifiersToRemove.count) notifications for chat \(chatId)")
        }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å badge count –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    func updateBadgeCount(totalUnread: Int) {
        DispatchQueue.main.async {
            UIApplication.shared.applicationIconBadgeNumber = totalUnread
            print("üî¢ Badge updated: \(totalUnread)")
        }
    }
}

// MARK: - UNUserNotificationCenterDelegate
extension NotificationService: UNUserNotificationCenterDelegate {
    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
    func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        willPresent notification: UNNotification,
        withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void
    ) {
        // –í iOS 14+ –∏—Å–ø–æ–ª—å–∑—É–µ–º .banner –∏ .sound
        completionHandler([.banner, .sound, .badge])
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        didReceive response: UNNotificationResponse,
        withCompletionHandler completionHandler: @escaping () -> Void
    ) {
        let userInfo = response.notification.request.content.userInfo
        
        if let chatId = userInfo["chatId"] as? String {
            print("üì± User tapped notification for chat: \(chatId)")
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            NotificationCenter.default.post(
                name: NSNotification.Name("NavigateToChat"),
                object: nil,
                userInfo: ["chatId": chatId]
            )
        }
        
        completionHandler()
    }
}

