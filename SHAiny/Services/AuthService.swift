//
//  AuthService.swift
//  SHAiny
//
//  Created by –°–µ—Ä–≥–µ–π –í–∏—Ö–ª—è–µ–≤ on 26.10.2025.
//

import Foundation

class AuthService {
    static let shared = AuthService()
    
    private var baseURL: String {
        return SettingsService.shared.serverURL
    }
    
    private init() {
        print("üåê AuthService initialized")
    }
    
    struct LoginResponse: Codable {
        let accessToken: String
        let userId: String
    }
    
    struct ErrorResponse: Codable {
        let error: String
    }
    
    struct GenerateCodeResponse: Codable {
        let codePhrase: String
    }
    
    // –õ–æ–≥–∏–Ω –ø–æ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑–µ
    func login(codePhrase: String) async throws -> LoginResponse {
        let url = URL(string: "\(baseURL)/auth/login")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        let body = ["codePhrase": codePhrase]
        request.httpBody = try JSONEncoder().encode(body)
        
        print("üîê Attempting login with code phrase...")
        print("üì° Request URL: \(url.absoluteString)")
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå Invalid response type")
                throw NSError(domain: "AuthService", code: -1, userInfo: [NSLocalizedDescriptionKey: "Invalid response"])
            }
            
            print("üìä Response status: \(httpResponse.statusCode)")
            
            if httpResponse.statusCode == 200 {
                let loginResponse = try JSONDecoder().decode(LoginResponse.self, from: data)
                print("‚úÖ Login successful! UserId: \(loginResponse.userId)")
                return loginResponse
            } else {
                let errorResponse = try? JSONDecoder().decode(ErrorResponse.self, from: data)
                let errorMessage = errorResponse?.error ?? "Login failed"
                print("‚ùå Login failed: \(errorMessage)")
                throw NSError(domain: "AuthService", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: errorMessage])
            }
        } catch {
            print("‚ùå Network error: \(error.localizedDescription)")
            throw error
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    func verifyToken(token: String) async throws -> Bool {
        let url = URL(string: "\(baseURL)/auth/verify")!
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        
        print("üîç Verifying token...")
        print("üì° Request URL: \(url.absoluteString)")
        
        do {
            let (_, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå Invalid response type")
                return false
            }
            
            print("üìä Verify response status: \(httpResponse.statusCode)")
            let isValid = httpResponse.statusCode == 200
            print(isValid ? "‚úÖ Token is valid" : "‚ùå Token is invalid")
            
            return isValid
        } catch {
            print("‚ùå Token verification error: \(error.localizedDescription)")
            return false
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func generateCode(codePhrase: String) async throws -> String {
        guard let token = KeychainService.shared.getAccessToken() else {
            throw NSError(domain: "AuthService", code: -1, userInfo: [NSLocalizedDescriptionKey: "No access token"])
        }
        
        let url = URL(string: "\(baseURL)/auth/generate-code")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        
        let body = ["codePhrase": codePhrase]
        request.httpBody = try JSONEncoder().encode(body)
        
        print("üîë Generating invite code...")
        print("üì° Request URL: \(url.absoluteString)")
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå Invalid response type")
                throw NSError(domain: "AuthService", code: -1, userInfo: [NSLocalizedDescriptionKey: "Invalid response"])
            }
            
            print("üìä Response status: \(httpResponse.statusCode)")
            
            if httpResponse.statusCode == 200 {
                let generateResponse = try JSONDecoder().decode(GenerateCodeResponse.self, from: data)
                print("‚úÖ Code generated successfully")
                return generateResponse.codePhrase
            } else {
                let errorResponse = try? JSONDecoder().decode(ErrorResponse.self, from: data)
                let errorMessage = errorResponse?.error ?? "Failed to generate code"
                print("‚ùå Generate code failed: \(errorMessage)")
                throw NSError(domain: "AuthService", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: errorMessage])
            }
        } catch {
            print("‚ùå Network error: \(error.localizedDescription)")
            throw error
        }
    }
}

