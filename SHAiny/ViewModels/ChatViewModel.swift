//
//  ChatViewModel.swift
//  SHAiny
//
//  Created by –°–µ—Ä–≥–µ–π –í–∏—Ö–ª—è–µ–≤ on 26.10.2025.
//

import Foundation
import Combine

final class ChatViewModel: ObservableObject {
    let chat: Chat
    
    @Driver var messages: [Message] = []
    @Driver var messageText: String = ""
    @Driver var participantsCount: Int = 0
    @Driver var isLoading: Bool = false
    @Driver var hasMoreMessages: Bool = false
    @Driver var chatName: String = ""
    @Published var shouldShowNicknameDialog: Bool = false
    @Published var replyingTo: Message? = nil
    @Published var participants: [Participant] = []
    @Published var participantsWithoutKey: [Participant] = []
    
    private var cancellables = Set<AnyCancellable>()
    private let chatService = ChatService.shared
    private let webSocketService = WebSocketService.shared
    private var currentOffset = 0
    private let pageSize = 50
    private var pendingMessageText: String?
    
    var canSendMessages: Bool {
        return !chat.isReadOnly
    }
    
    init(chat: Chat) {
        self.chat = chat
        self.participantsCount = chat.participantsCount
        self.chatName = chat.name
        setupBindings()
        loadMessages()
        loadParticipants()
        setupWebSocketListener()
    }
    
    private func setupBindings() {
        $messages
            .sink { [weak self] _ in
                self?.objectWillChange.send()
            }
            .store(in: &cancellables)
        
        $messageText
            .sink { [weak self] _ in
                self?.objectWillChange.send()
            }
            .store(in: &cancellables)
        
        $participantsCount
            .sink { [weak self] _ in
                self?.objectWillChange.send()
            }
            .store(in: &cancellables)
        
        $isLoading
            .sink { [weak self] _ in
                self?.objectWillChange.send()
            }
            .store(in: &cancellables)
        
        $hasMoreMessages
            .sink { [weak self] _ in
                self?.objectWillChange.send()
            }
            .store(in: &cancellables)
        
        $chatName
            .sink { [weak self] _ in
                self?.objectWillChange.send()
            }
            .store(in: &cancellables)
    }
    
    private func setupWebSocketListener() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        webSocketService.newMessagePublisher
            .filter { [weak self] (chatId, _) in
                chatId == self?.chat.chatId
            }
            .sink { [weak self] (_, incomingMessage) in
                guard let self = self else { return }
                
                // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                var decryptedText = incomingMessage.text
                
                if let encryptionKey = self.chat.encryptionKey {
                    do {
                        decryptedText = try CryptoUtils.decrypt(incomingMessage.text, keyPhrase: encryptionKey)
                    } catch {
                        print("‚ùå Failed to decrypt message: \(error.localizedDescription)")
                    }
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º reply (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å)
                var replyTo = incomingMessage.replyTo
                if let reply = incomingMessage.replyTo, let encryptionKey = self.chat.encryptionKey {
                    do {
                        let decryptedReplyText = try CryptoUtils.decrypt(reply.text, keyPhrase: encryptionKey)
                        replyTo = MessageReply(
                            messageId: reply.messageId,
                            text: decryptedReplyText, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                            senderName: reply.senderName,
                            timestamp: reply.timestamp
                        )
                        print("‚úÖ Reply text decrypted in real-time")
                    } catch {
                        print("‚ö†Ô∏è Failed to decrypt reply text: \(error.localizedDescription)")
                    }
                }
                
                // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (isFromCurrentUser —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ WebSocketService)
                let message = Message(
                    id: incomingMessage.id,
                    text: decryptedText,
                    encryptedText: incomingMessage.encryptedText,
                    shaHash: incomingMessage.shaHash,
                    timestamp: incomingMessage.timestamp,
                    isFromCurrentUser: incomingMessage.isFromCurrentUser,
                    senderName: incomingMessage.senderName,
                    replyTo: replyTo
                )
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
                if !self.messages.contains(where: { $0.id == message.id }) {
                    self.messages.append(message)
                    print("üì© New message added to chat \(self.chat.name)")
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ–º —á–∞—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º —á–∞—Ç–µ
                    Task {
                        do {
                            try await self.chatService.markChatAsRead(chatId: self.chat.chatId)
                            print("‚úÖ Chat \(self.chat.chatId) auto-marked as read (new message received)")
                        } catch {
                            print("‚ùå Failed to auto-mark chat as read: \(error.localizedDescription)")
                        }
                    }
                }
            }
            .store(in: &cancellables)
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        webSocketService.participantsUpdatedPublisher
            .filter { [weak self] (chatId, _) in
                chatId == self?.chat.chatId
            }
            .sink { [weak self] (_, count) in
                guard let self = self else { return }
                
                self.participantsCount = count
                
                // –¢–∞–∫–∂–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—à–∫–∏
                self.loadParticipants()
                
                print("üë• Participants count updated to \(count) for chat \(self.chat.name)")
            }
            .store(in: &cancellables)
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        webSocketService.permissionGrantedPublisher
            .filter { [weak self] (chatId, _, _) in
                chatId == self?.chat.chatId
            }
            .sink { [weak self] (_, authorId, unreadCount) in
                guard let self = self else { return }
                
                print("üîì Received permission from \(authorId), reloading messages... New unreadCount: \(unreadCount)")
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                self.loadMessages(reset: true)
                self.loadParticipants()
            }
            .store(in: &cancellables)
    }
    
    private func loadMessages(reset: Bool = true) {
        if reset {
            currentOffset = 0
        }
        
        isLoading = true
        
        Task {
            do {
                let result = try await chatService.fetchMessages(
                    chatId: chat.chatId,
                    encryptionKey: chat.encryptionKey,
                    limit: pageSize,
                    offset: currentOffset
                )
                
                await MainActor.run {
                    if reset {
                        self.messages = result.messages
                    } else {
                        self.messages.insert(contentsOf: result.messages, at: 0)
                    }
                    self.hasMoreMessages = result.hasMore
                    self.currentOffset += result.messages.count
                    self.isLoading = false
                }
            } catch {
                await MainActor.run {
                    self.isLoading = false
                    print("‚ùå Failed to load messages: \(error.localizedDescription)")
                }
            }
        }
    }
    
    func loadMoreMessages() {
        guard !isLoading && hasMoreMessages else { return }
        loadMessages(reset: false)
    }
    
    func sendMessage() {
        guard !messageText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
            return
        }
        
        let textToSend = messageText
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        Task {
            do {
                let nickname = try await chatService.getNickname(for: chat.chatId)
                
                if nickname == nil {
                    // –ï—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                    await MainActor.run {
                        self.pendingMessageText = textToSend
                        // –ù–ï –æ—á–∏—â–∞–µ–º messageText - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                        self.shouldShowNicknameDialog = true
                    }
                    return
                }
                
                // –ï—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º –µ—Å—Ç—å, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await MainActor.run {
                    self.messageText = ""
                }
                
                await sendMessageInternal(textToSend)
            } catch {
                await MainActor.run {
                    print("‚ùå Failed to check nickname: \(error.localizedDescription)")
                }
            }
        }
    }
    
    private func sendMessageInternal(_ textToSend: String) async {
        // Capture reply info before sending
        let replyInfo = replyingTo
        
        // Clear reply state immediately
        await MainActor.run {
            self.replyingTo = nil
        }
        
        do {
            // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            var encryptedText = textToSend
            if let encryptionKey = chat.encryptionKey {
                encryptedText = try CryptoUtils.encrypt(textToSend, keyPhrase: encryptionKey)
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SHA hash –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            let shaHash = CryptoUtils.generateHash(textToSend)
            
            // Prepare reply data if replying to a message
            var replyToData: [String: Any]? = nil
            if let reply = replyInfo {
                replyToData = [
                    "messageId": reply.id.uuidString,
                    "text": reply.encryptedText, // Send encrypted text
                    "senderName": reply.senderName ?? "Unknown",
                    "timestamp": reply.timestamp.timeIntervalSince1970 * 1000 // Convert to milliseconds
                ]
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
            webSocketService.sendChatMessage(
                chatId: chat.chatId,
                encryptedText: encryptedText,
                shaHash: shaHash,
                replyTo: replyToData
            )
            
            if replyInfo != nil {
                print("üì§ Reply sent to chat: \(chat.name)")
            } else {
                print("üì§ Message sent to chat: \(chat.name)")
            }
        } catch {
            await MainActor.run {
                print("‚ùå Failed to send message: \(error.localizedDescription)")
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.messageText = textToSend
                // Restore reply state on error
                self.replyingTo = replyInfo
            }
        }
    }
    
    func updateParticipantsCount(_ count: Int) {
        participantsCount = count
    }
    
    func renameChat(newName: String) async -> Bool {
        guard let encryptionKey = chat.encryptionKey else {
            print("‚ùå No encryption key for chat")
            return false
        }
        
        do {
            try await chatService.renameChat(chatId: chat.chatId, newName: newName, encryptionKey: encryptionKey)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
            await MainActor.run {
                self.chatName = newName
            }
            
            print("‚úÖ Chat renamed to: \(newName)")
            return true
        } catch {
            print("‚ùå Failed to rename chat: \(error.localizedDescription)")
            return false
        }
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    func setNickname(_ nickname: String) async -> Bool {
        guard !nickname.isEmpty else { return false }
        
        do {
            try await chatService.setNickname(nickname, for: chat.chatId)
            print("‚úÖ Nickname set to: \(nickname)")
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –≤ –ø–ª–∞—à–∫–µ
            loadParticipants()
            
            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if let pendingText = pendingMessageText {
                await MainActor.run {
                    self.pendingMessageText = nil
                    self.messageText = "" // –¢–µ–ø–µ—Ä—å –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
                }
                await sendMessageInternal(pendingText)
            }
            
            return true
        } catch {
            print("‚ùå Failed to set nickname: \(error.localizedDescription)")
            return false
        }
    }
    
    // –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    func cancelPendingMessage() {
        pendingMessageText = nil
        // messageText –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å - –Ω–µ –æ—á–∏—â–∞–µ–º
    }
    
    // MARK: - Reply Management
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    func setReply(to message: Message) {
        replyingTo = message
        print("üìù Replying to message from \(message.senderName ?? "unknown")")
    }
    
    /// –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
    func cancelReply() {
        replyingTo = nil
        print("‚ùå Reply cancelled")
    }
    
    // MARK: - Participants Management
    
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    func loadParticipants() {
        Task {
            do {
                let fetchedParticipants = try await chatService.fetchParticipants(for: chat.chatId)
                
                await MainActor.run {
                    self.participants = fetchedParticipants
                    self.participantsCount = fetchedParticipants.count
                    
                    // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                    // –ò —É –∫–æ—Ç–æ—Ä—ã—Ö –ï–°–¢–¨ –Ω–∏–∫–Ω–µ–π–º (—Ç.–µ. –æ–Ω–∏ —É–∂–µ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ)
                    self.participantsWithoutKey = fetchedParticipants.filter { 
                        !$0.canSeeMyMessages && !$0.isCurrentUser && $0.nickname != nil
                    }
                    
                    print("üë• Loaded \(fetchedParticipants.count) participants, \(self.participantsWithoutKey.count) cannot see my messages and have nickname")
                }
            } catch {
                print("‚ùå Failed to load participants: \(error.localizedDescription)")
            }
        }
    }
    
    /// –†–∞–∑—Ä–µ—à–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É –≤–∏–¥–µ—Ç—å –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    func shareKey(with participant: Participant) {
        Task {
            do {
                try await chatService.grantPermission(to: participant.userId, in: chat.chatId)
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                loadParticipants()
                
                print("‚úÖ Permission granted to \(participant.displayName)")
            } catch {
                print("‚ùå Failed to grant permission: \(error.localizedDescription)")
            }
        }
    }
}

