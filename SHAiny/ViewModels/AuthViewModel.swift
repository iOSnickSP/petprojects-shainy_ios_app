//
//  AuthViewModel.swift
//  SHAiny
//
//  Created by –°–µ—Ä–≥–µ–π –í–∏—Ö–ª—è–µ–≤ on 26.10.2025.
//

import Foundation
import Combine

/// View model managing user authentication state and login/logout actions
final class AuthViewModel: ObservableObject {
    @Published var authState: AuthState = .loading
    @Published var errorMessage: String?
    
    private let keychainService = KeychainService.shared
    private let authService = AuthService.shared
    private let webSocketService = WebSocketService.shared
    private let notificationService = NotificationService.shared
    
    init() {
        checkAuthentication()
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    func checkAuthentication() {
        authState = .loading
        
        if let token = keychainService.getAccessToken() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            Task {
                do {
                    let isValid = try await authService.verifyToken(token: token)
                    await MainActor.run {
                        if isValid {
                            self.authState = .authenticated
                            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            self.webSocketService.connect()
                            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            self.notificationService.requestAuthorization()
                        } else {
                            self.authState = .unauthenticated
                        }
                    }
                } catch {
                    await MainActor.run {
                        self.authState = .unauthenticated
                    }
                }
            }
        } else {
            authState = .unauthenticated
        }
    }
    
    // –õ–æ–≥–∏–Ω –ø–æ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑–µ
    func login(codePhrase: String) async {
        errorMessage = nil
        
        do {
            let response = try await authService.login(codePhrase: codePhrase)
            
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ KeyChain
                _ = keychainService.saveAccessToken(response.accessToken)
                
                await MainActor.run {
                    authState = .authenticated
                    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
                    webSocketService.connect()
                    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    notificationService.requestAuthorization()
                }
        } catch {
            await MainActor.run {
                errorMessage = error.localizedDescription
            }
        }
    }
    
    // Logout
    func logout() {
        print("üö™ Logout: Deleting access token from Keychain")
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç WebSocket
        webSocketService.disconnect()
        
        let deleted = keychainService.deleteAccessToken()
        print(deleted ? "‚úÖ Access token deleted" : "‚ö†Ô∏è Failed to delete token")
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ —á–∞—Ç–æ–≤
        ChatKeysStorage.shared.deleteAllKeys()
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∏–∫–Ω–µ–π–º—ã
        ChatNicknamesStorage.shared.deleteAllNicknames()
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notificationService.clearAllNotifications()
        
        authState = .unauthenticated
        print("üîÑ Auth state changed to: unauthenticated")
    }
}

