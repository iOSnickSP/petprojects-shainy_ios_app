//
//  SHAinyApp.swift
//  SHAiny
//
//  Created by –°–µ—Ä–≥–µ–π –í–∏—Ö–ª—è–µ–≤ on 26.10.2025.
//

import SwiftUI

@main
struct SHAinyApp: App {
    @StateObject private var authViewModel = AuthViewModel()
    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    
    var body: some Scene {
        WindowGroup {
            Group {
                switch authViewModel.authState {
                case .loading:
                    SplashView()
                case .authenticated:
                    ContentView()
                case .unauthenticated:
                    LoginView(authViewModel: authViewModel)
                }
            }
            .environmentObject(authViewModel)
        }
    }
}

// AppDelegate –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ APNs callbacks
class AppDelegate: NSObject, UIApplicationDelegate {
    private let badgeManager = BadgeManager.shared
    
    func application(
        _ application: UIApplication,
        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil
    ) -> Bool {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º badge –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        badgeManager.syncWithSystemBadge()
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        NotificationService.shared.requestAuthorization()
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º launch –∏–∑ notification
        if let userInfo = launchOptions?[.remoteNotification] as? [String: Any] {
            handleRemoteNotification(userInfo: userInfo)
        }
        
        return true
    }
    
    // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è device token
    func application(
        _ application: UIApplication,
        didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data
    ) {
        NotificationService.shared.didRegisterForRemoteNotifications(with: deviceToken)
    }
    
    // –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    func application(
        _ application: UIApplication,
        didFailToRegisterForRemoteNotificationsWithError error: Error
    ) {
        NotificationService.shared.didFailToRegisterForRemoteNotifications(with: error)
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ remote notification –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–æ
    func application(
        _ application: UIApplication,
        didReceiveRemoteNotification userInfo: [AnyHashable : Any],
        fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void
    ) {
        print("üì± Remote notification received")
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º badge –∏–∑ aps payload
        if let aps = userInfo["aps"] as? [String: Any],
           let badge = aps["badge"] as? Int {
            badgeManager.setBadge(badge)
            print("üî¢ Badge updated from remote notification: \(badge)")
        }
        
        handleRemoteNotification(userInfo: userInfo)
        completionHandler(.newData)
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ notification
    private func handleRemoteNotification(userInfo: [AnyHashable: Any]) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º chatId –µ—Å–ª–∏ –µ—Å—Ç—å
        if let chatId = userInfo["chatId"] as? String {
            print("üì± Notification for chat: \(chatId)")
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            NotificationCenter.default.post(
                name: NSNotification.Name("NavigateToChat"),
                object: nil,
                userInfo: ["chatId": chatId]
            )
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    func applicationDidBecomeActive(_ application: UIApplication) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º badge –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        badgeManager.syncWithSystemBadge()
        print("üì± App became active, badge synced")
    }
}
